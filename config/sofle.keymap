#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/bt.h>
#include "zmk-helpers/helper.h"
#include "zmk-helpers/key-labels/lily58.h"

// Fix CS pin for zmk-defined solfe board
#if SHIELD_SOFLE_LEFT || SHIELD_SOFLE_RIGHT
&nice_view_spi {
    cs-gpios = <&pro_micro 0 GPIO_ACTIVE_HIGH>;
};
#endif

// Define layer numbers

#define ___ &trans
#define BASE 0
#define GAME 1
#define MACRO 2
#define SYMBOL 3
#define FUNC 4

// Define tapping terms

#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

// Define keys
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define KEYS_T LH3 LH2 LH1 LH0 RH0 RH1 RH2 RH3

/ {
    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.

        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods
        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>,  <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };


        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.
        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;

            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            // hold-trigger-on-release;
        };

        /*
         * Non-Positional Homerow Mods
         * Used for &mm_grescm_gui behavior on left hand.
         *
         * Usage: &hm LSHFT T
         * Tap: T
         * Tap-Tap-Hold: Repeat T
         * Hold: LSHIFT
         */
        hm: homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <200>;
        };
    };
};

/ {
    keymap {
        compatible = "zmk,keymap";

        colemak {
            display-name = "Base";
            bindings = <
&hm_l TILDE ESC &kp N1       &kp N2       &kp N3        &kp N4             &kp N5                                          &kp N6             &kp N7              &kp N8        &kp N9       &kp N0          &kp BACKSPACE
&kp TAB         &kp Q        &kp W        &kp F         &kp P              &kp G                                           &kp J              &kp L               &kp U         &kp Y        &kp SEMI        &kp SQT
&mt LCTL ENTER  &hm_l LCTL A &hm_l LALT R &hm_l LGUI S  &kp T              &kp D                                           &kp H              &kp N               &hm_r RGUI E  &hm_r RALT I &hm_r RCTL O    &mt RCTL ENTER
&kp LSHFT       &kp Z        &kp X        &kp C         &kp V              &kp B          &tog MACRO      &kp C_MUTE       &kp K              &kp M               &kp COMMA     &kp DOT      &kp FSLH        &kp RSHFT
                             &kp LALT     &kp LGUI      &mo FUNC           &kp SPACE      &kp TAB         &kp DEL          &kp BKSP           &mo SYMBOL          &kp RGUI      &kp RALT
            >;
            sensor-bindings = <&inc_dec_kp LC(Y) LC(Z) &inc_dec_kp C_VOL_DN C_VOL_UP>;
        };

        game {
            display-name = "Game";
            bindings = <
&trans       &trans              &trans         &trans        &trans        &trans                      &trans  &trans  &trans  &trans  &trans    &trans
&trans       &trans              &trans         &kp E         &kp R         &kp T                       &kp Y   &kp U   &kp I   &kp O   &kp P     &trans
&trans       &trans              &kp S          &kp D         &kp F         &kp G                       &trans  &kp J   &kp K   &kp L   &kp SEMI  &trans
&trans       &trans              &trans         &trans        &trans        &trans      &trans  &trans  &kp N   &trans  &trans  &trans  &trans    &trans
                                 &trans         &trans        &trans        &trans      &trans  &trans  &trans  &trans  &trans  &trans
            >;
        };

        macro {
            display-name = "Macro";
            bindings = <
&bootloader  &bt BT_SEL 0        &bt BT_SEL 1   &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR                        &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans              &trans         &trans        &trans        &trans                            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &kp LC(LS(ESCAPE))  &kp LS(LG(S))  &trans        &trans        &trans                            &trans  &trans  &trans  &trans  &trans  &trans
&trans       &trans              &trans         &trans        &trans        &trans      &trans     &tog GAME  &trans  &trans  &trans  &trans  &trans  &trans
                                 &trans         &trans        &trans        &trans      &trans     &trans     &trans  &trans  &trans  &trans
            >;
        };

        symbol {
            display-name = "Syms";
            bindings = <
&trans  &trans            &trans         &trans            &trans           &trans                      &trans      &trans      &trans          &trans      &ext_power EP_TOG       &bootloader
&trans  &kp EXCL          &kp AT         &kp LBRC          &kp RBRC         &kp PIPE                    &kp EQUAL   &kp N7      &kp N8          &kp N9      &kp ASTRK               &trans
&trans  &kp HASH          &kp DLLR       &kp LPAR          &kp RPAR         &kp GRAVE                   &kp MINUS   &kp N4      &kp N5          &kp N6      &kp PLUS                &trans
&trans  &kp PRCNT         &kp CARET      &kp LBKT          &kp RBKT         &kp TILDE   &trans  &trans  &kp AMPS    &kp N1      &kp N2          &kp N3      &kp BSLH                &trans
                          &trans         &trans            &trans           &trans      &trans  &trans  &trans      &trans      &kp N0          &kp DOT
            >;
        };

        function {
            display-name = "Function";
            bindings = <
&trans  &trans      &trans   &trans   &trans    &trans                       &trans  &trans  &trans   &trans   &trans   &trans
&trans  &trans      &kp HOME &kp UP   &kp END   &kp PG_UP                    &trans  &kp F7  &kp F8   &kp F9   &kp F10  &trans
&trans  &trans      &kp LEFT &kp DOWN &kp RIGHT &kp PG_DN                    &trans  &kp F4  &kp F5   &kp F6   &kp F11  &trans
&trans  &trans      &trans   &trans   &trans    &trans       &trans  &trans  &trans  &kp F1  &kp F2   &kp F3   &kp F12  &trans
                    &trans   &trans   &trans    &trans       &trans  &trans  &trans  &trans  &trans   &trans
            >;
        };

    };
};